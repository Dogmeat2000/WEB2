name: Run Vitest Tests with Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
    defaults:
      run:
        working-directory: Assignment 2 - Pokedex Web App/pokedex-app

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: 'Assignment 2 - Pokedex Web App/pokedex-app/package-lock.json'

      - name: Install dependencies
        working-directory: Assignment 2 - Pokedex Web App/pokedex-app
        run: npm ci

      - name: Run Vitest with coverage
        working-directory: Assignment 2 - Pokedex Web App/pokedex-app
        run: |
          npm run test:coverage
        env:
          FORCE_COLOR: 1

      - name: Debug coverage files
        if: always()
        run: |
          echo "Listing coverage directory contents:"
          ls -la coverage/ || echo "Coverage directory not found"
          echo "Checking for junit.xml in coverage:"
          cat coverage/junit.xml || echo "junit.xml not found in coverage"
          echo "Searching for junit.xml in project:"
          find . -name "junit.xml" || echo "junit.xml not found anywhere"

      - name: Verify junit.xml accessibility
        if: always()
        run: |
          echo "Checking if junit.xml exists:"
          test -f coverage/junit.xml && echo "junit.xml exists" || echo "junit.xml does not exist"
          echo "Full path:"
          realpath coverage/junit.xml || echo "Cannot resolve path"

      - name: Generate Test Summary
        if: always()
        run: |
          # Extract test metrics from junit.xml
          TOTAL_TESTS=$(grep -o 'tests="[0-9]*"' coverage/junit.xml | head -1 | grep -o '[0-9]*')
          FAILURES=$(grep -o 'failures="[0-9]*"' coverage/junit.xml | head -1 | grep -o '[0-9]*')
          ERRORS=$(grep -o 'errors="[0-9]*"' coverage/junit.xml | head -1 | grep -o '[0-9]*')
          SKIPPED=$(grep -o 'skipped="[0-9]*"' coverage/junit.xml | head -1 | grep -o '[0-9]*')
          
          # Handle cases where values might be missing
          TOTAL_TESTS=${TOTAL_TESTS:-0}
          FAILURES=${FAILURES:-0}
          ERRORS=${ERRORS:-0}
          SKIPPED=${SKIPPED:-0}
          
          # Calculate passed tests
          PASSED=$((TOTAL_TESTS - FAILURES - ERRORS - SKIPPED))
          
          # Extract coverage metrics (if available in coverage-summary.json)
          if [ -f coverage/coverage-summary.json ]; then
            LINE_COVERAGE=$(jq '.total.lines.pct' coverage/coverage-summary.json)
            BRANCH_COVERAGE=$(jq '.total.branches.pct' coverage/coverage-summary.json)
          else
            LINE_COVERAGE="N/A"
            BRANCH_COVERAGE="N/A"
          fi
          
          # Generate Markdown summary
          echo "## Test Report Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Tests:** $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "**Passed:** $PASSED" >> $GITHUB_STEP_SUMMARY
          echo "**Failures:** $FAILURES" >> $GITHUB_STEP_SUMMARY
          echo "**Errors:** $ERRORS" >> $GITHUB_STEP_SUMMARY
          echo "**Skipped:** $SKIPPED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Line Coverage:** $LINE_COVERAGE%" >> $GITHUB_STEP_SUMMARY
          echo "**Branch Coverage:** $BRANCH_COVERAGE%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "For detailed test results, see the [Checks tab](#checks)." >> $GITHUB_STEP_SUMMARY

      - name: Upload test results to GitHub UI
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: 'vitest-test-report'
          reporter: 'jest-junit'
          path: 'Assignment 2 - Pokedex Web App/pokedex-app/coverage/junit.xml'
          path-replace-backslashes: false
          list-suites: all
          list-tests: all
          max-annotations: 10
          fail-on-error: true
          fail-on-empty: true
          only-summary: false

      - name: Show coverage summary in logs
        if: always()
        run: |
          echo "=== Coverage Summary ==="
          cat coverage/coverage-summary.json || echo "No summary file found"
          echo "========================"
